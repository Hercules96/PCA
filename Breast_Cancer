{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7897e633",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:55.683684Z",
     "iopub.status.busy": "2024-08-22T14:01:55.683292Z",
     "iopub.status.idle": "2024-08-22T14:01:56.622338Z",
     "shell.execute_reply": "2024-08-22T14:01:56.621133Z"
    },
    "papermill": {
     "duration": 0.954802,
     "end_time": "2024-08-22T14:01:56.625228",
     "exception": false,
     "start_time": "2024-08-22T14:01:55.670426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/breast-cancer-wisconsin-data/data.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a6d9619e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:56.649120Z",
     "iopub.status.busy": "2024-08-22T14:01:56.648588Z",
     "iopub.status.idle": "2024-08-22T14:01:56.678920Z",
     "shell.execute_reply": "2024-08-22T14:01:56.677765Z"
    },
    "papermill": {
     "duration": 0.045888,
     "end_time": "2024-08-22T14:01:56.682020",
     "exception": false,
     "start_time": "2024-08-22T14:01:56.636132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv('/kaggle/input/breast-cancer-wisconsin-data/data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "862e3419",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:56.707479Z",
     "iopub.status.busy": "2024-08-22T14:01:56.707017Z",
     "iopub.status.idle": "2024-08-22T14:01:56.753106Z",
     "shell.execute_reply": "2024-08-22T14:01:56.751899Z"
    },
    "papermill": {
     "duration": 0.062015,
     "end_time": "2024-08-22T14:01:56.755979",
     "exception": false,
     "start_time": "2024-08-22T14:01:56.693964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>diagnosis</th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "      <th>Unnamed: 32</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>842302</td>\n",
       "      <td>M</td>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>...</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>842517</td>\n",
       "      <td>M</td>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>...</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84300903</td>\n",
       "      <td>M</td>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>...</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>84348301</td>\n",
       "      <td>M</td>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>...</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>84358402</td>\n",
       "      <td>M</td>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>...</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
       "0    842302         M        17.99         10.38          122.80     1001.0   \n",
       "1    842517         M        20.57         17.77          132.90     1326.0   \n",
       "2  84300903         M        19.69         21.25          130.00     1203.0   \n",
       "3  84348301         M        11.42         20.38           77.58      386.1   \n",
       "4  84358402         M        20.29         14.34          135.10     1297.0   \n",
       "\n",
       "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
       "0          0.11840           0.27760          0.3001              0.14710   \n",
       "1          0.08474           0.07864          0.0869              0.07017   \n",
       "2          0.10960           0.15990          0.1974              0.12790   \n",
       "3          0.14250           0.28390          0.2414              0.10520   \n",
       "4          0.10030           0.13280          0.1980              0.10430   \n",
       "\n",
       "   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n",
       "0  ...          17.33           184.60      2019.0            0.1622   \n",
       "1  ...          23.41           158.80      1956.0            0.1238   \n",
       "2  ...          25.53           152.50      1709.0            0.1444   \n",
       "3  ...          26.50            98.87       567.7            0.2098   \n",
       "4  ...          16.67           152.20      1575.0            0.1374   \n",
       "\n",
       "   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n",
       "0             0.6656           0.7119                0.2654          0.4601   \n",
       "1             0.1866           0.2416                0.1860          0.2750   \n",
       "2             0.4245           0.4504                0.2430          0.3613   \n",
       "3             0.8663           0.6869                0.2575          0.6638   \n",
       "4             0.2050           0.4000                0.1625          0.2364   \n",
       "\n",
       "   fractal_dimension_worst  Unnamed: 32  \n",
       "0                  0.11890          NaN  \n",
       "1                  0.08902          NaN  \n",
       "2                  0.08758          NaN  \n",
       "3                  0.17300          NaN  \n",
       "4                  0.07678          NaN  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a6ca7e36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:56.783051Z",
     "iopub.status.busy": "2024-08-22T14:01:56.781572Z",
     "iopub.status.idle": "2024-08-22T14:01:56.788545Z",
     "shell.execute_reply": "2024-08-22T14:01:56.787332Z"
    },
    "papermill": {
     "duration": 0.023456,
     "end_time": "2024-08-22T14:01:56.791174",
     "exception": false,
     "start_time": "2024-08-22T14:01:56.767718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data = data.drop(columns='Unnamed: 32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "06d63346",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:56.815942Z",
     "iopub.status.busy": "2024-08-22T14:01:56.815552Z",
     "iopub.status.idle": "2024-08-22T14:01:56.821933Z",
     "shell.execute_reply": "2024-08-22T14:01:56.820814Z"
    },
    "papermill": {
     "duration": 0.021466,
     "end_time": "2024-08-22T14:01:56.824401",
     "exception": false,
     "start_time": "2024-08-22T14:01:56.802935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = data.drop(columns='diagnosis')\n",
    "y = data['diagnosis']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "00523bd7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:56.848462Z",
     "iopub.status.busy": "2024-08-22T14:01:56.848056Z",
     "iopub.status.idle": "2024-08-22T14:01:56.880239Z",
     "shell.execute_reply": "2024-08-22T14:01:56.878849Z"
    },
    "papermill": {
     "duration": 0.04717,
     "end_time": "2024-08-22T14:01:56.882855",
     "exception": false,
     "start_time": "2024-08-22T14:01:56.835685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>radius_worst</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>842302</td>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>...</td>\n",
       "      <td>25.38</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>842517</td>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>...</td>\n",
       "      <td>24.99</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84300903</td>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>...</td>\n",
       "      <td>23.57</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>84348301</td>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>...</td>\n",
       "      <td>14.91</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>84358402</td>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>...</td>\n",
       "      <td>22.54</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
       "0    842302        17.99         10.38          122.80     1001.0   \n",
       "1    842517        20.57         17.77          132.90     1326.0   \n",
       "2  84300903        19.69         21.25          130.00     1203.0   \n",
       "3  84348301        11.42         20.38           77.58      386.1   \n",
       "4  84358402        20.29         14.34          135.10     1297.0   \n",
       "\n",
       "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
       "0          0.11840           0.27760          0.3001              0.14710   \n",
       "1          0.08474           0.07864          0.0869              0.07017   \n",
       "2          0.10960           0.15990          0.1974              0.12790   \n",
       "3          0.14250           0.28390          0.2414              0.10520   \n",
       "4          0.10030           0.13280          0.1980              0.10430   \n",
       "\n",
       "   symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
       "0         0.2419  ...         25.38          17.33           184.60   \n",
       "1         0.1812  ...         24.99          23.41           158.80   \n",
       "2         0.2069  ...         23.57          25.53           152.50   \n",
       "3         0.2597  ...         14.91          26.50            98.87   \n",
       "4         0.1809  ...         22.54          16.67           152.20   \n",
       "\n",
       "   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
       "0      2019.0            0.1622             0.6656           0.7119   \n",
       "1      1956.0            0.1238             0.1866           0.2416   \n",
       "2      1709.0            0.1444             0.4245           0.4504   \n",
       "3       567.7            0.2098             0.8663           0.6869   \n",
       "4      1575.0            0.1374             0.2050           0.4000   \n",
       "\n",
       "   concave points_worst  symmetry_worst  fractal_dimension_worst  \n",
       "0                0.2654          0.4601                  0.11890  \n",
       "1                0.1860          0.2750                  0.08902  \n",
       "2                0.2430          0.3613                  0.08758  \n",
       "3                0.2575          0.6638                  0.17300  \n",
       "4                0.1625          0.2364                  0.07678  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "432580d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:56.907939Z",
     "iopub.status.busy": "2024-08-22T14:01:56.907550Z",
     "iopub.status.idle": "2024-08-22T14:01:56.932955Z",
     "shell.execute_reply": "2024-08-22T14:01:56.931837Z"
    },
    "papermill": {
     "duration": 0.041499,
     "end_time": "2024-08-22T14:01:56.936032",
     "exception": false,
     "start_time": "2024-08-22T14:01:56.894533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 569 entries, 0 to 568\n",
      "Data columns (total 31 columns):\n",
      " #   Column                   Non-Null Count  Dtype  \n",
      "---  ------                   --------------  -----  \n",
      " 0   id                       569 non-null    int64  \n",
      " 1   radius_mean              569 non-null    float64\n",
      " 2   texture_mean             569 non-null    float64\n",
      " 3   perimeter_mean           569 non-null    float64\n",
      " 4   area_mean                569 non-null    float64\n",
      " 5   smoothness_mean          569 non-null    float64\n",
      " 6   compactness_mean         569 non-null    float64\n",
      " 7   concavity_mean           569 non-null    float64\n",
      " 8   concave points_mean      569 non-null    float64\n",
      " 9   symmetry_mean            569 non-null    float64\n",
      " 10  fractal_dimension_mean   569 non-null    float64\n",
      " 11  radius_se                569 non-null    float64\n",
      " 12  texture_se               569 non-null    float64\n",
      " 13  perimeter_se             569 non-null    float64\n",
      " 14  area_se                  569 non-null    float64\n",
      " 15  smoothness_se            569 non-null    float64\n",
      " 16  compactness_se           569 non-null    float64\n",
      " 17  concavity_se             569 non-null    float64\n",
      " 18  concave points_se        569 non-null    float64\n",
      " 19  symmetry_se              569 non-null    float64\n",
      " 20  fractal_dimension_se     569 non-null    float64\n",
      " 21  radius_worst             569 non-null    float64\n",
      " 22  texture_worst            569 non-null    float64\n",
      " 23  perimeter_worst          569 non-null    float64\n",
      " 24  area_worst               569 non-null    float64\n",
      " 25  smoothness_worst         569 non-null    float64\n",
      " 26  compactness_worst        569 non-null    float64\n",
      " 27  concavity_worst          569 non-null    float64\n",
      " 28  concave points_worst     569 non-null    float64\n",
      " 29  symmetry_worst           569 non-null    float64\n",
      " 30  fractal_dimension_worst  569 non-null    float64\n",
      "dtypes: float64(30), int64(1)\n",
      "memory usage: 137.9 KB\n"
     ]
    }
   ],
   "source": [
    "X.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ec33edca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:56.962837Z",
     "iopub.status.busy": "2024-08-22T14:01:56.962432Z",
     "iopub.status.idle": "2024-08-22T14:01:57.056310Z",
     "shell.execute_reply": "2024-08-22T14:01:57.055206Z"
    },
    "papermill": {
     "duration": 0.109653,
     "end_time": "2024-08-22T14:01:57.059211",
     "exception": false,
     "start_time": "2024-08-22T14:01:56.949558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>radius_worst</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.690000e+02</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "      <td>569.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.037183e+07</td>\n",
       "      <td>14.127292</td>\n",
       "      <td>19.289649</td>\n",
       "      <td>91.969033</td>\n",
       "      <td>654.889104</td>\n",
       "      <td>0.096360</td>\n",
       "      <td>0.104341</td>\n",
       "      <td>0.088799</td>\n",
       "      <td>0.048919</td>\n",
       "      <td>0.181162</td>\n",
       "      <td>...</td>\n",
       "      <td>16.269190</td>\n",
       "      <td>25.677223</td>\n",
       "      <td>107.261213</td>\n",
       "      <td>880.583128</td>\n",
       "      <td>0.132369</td>\n",
       "      <td>0.254265</td>\n",
       "      <td>0.272188</td>\n",
       "      <td>0.114606</td>\n",
       "      <td>0.290076</td>\n",
       "      <td>0.083946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.250206e+08</td>\n",
       "      <td>3.524049</td>\n",
       "      <td>4.301036</td>\n",
       "      <td>24.298981</td>\n",
       "      <td>351.914129</td>\n",
       "      <td>0.014064</td>\n",
       "      <td>0.052813</td>\n",
       "      <td>0.079720</td>\n",
       "      <td>0.038803</td>\n",
       "      <td>0.027414</td>\n",
       "      <td>...</td>\n",
       "      <td>4.833242</td>\n",
       "      <td>6.146258</td>\n",
       "      <td>33.602542</td>\n",
       "      <td>569.356993</td>\n",
       "      <td>0.022832</td>\n",
       "      <td>0.157336</td>\n",
       "      <td>0.208624</td>\n",
       "      <td>0.065732</td>\n",
       "      <td>0.061867</td>\n",
       "      <td>0.018061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>8.670000e+03</td>\n",
       "      <td>6.981000</td>\n",
       "      <td>9.710000</td>\n",
       "      <td>43.790000</td>\n",
       "      <td>143.500000</td>\n",
       "      <td>0.052630</td>\n",
       "      <td>0.019380</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.106000</td>\n",
       "      <td>...</td>\n",
       "      <td>7.930000</td>\n",
       "      <td>12.020000</td>\n",
       "      <td>50.410000</td>\n",
       "      <td>185.200000</td>\n",
       "      <td>0.071170</td>\n",
       "      <td>0.027290</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.156500</td>\n",
       "      <td>0.055040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.692180e+05</td>\n",
       "      <td>11.700000</td>\n",
       "      <td>16.170000</td>\n",
       "      <td>75.170000</td>\n",
       "      <td>420.300000</td>\n",
       "      <td>0.086370</td>\n",
       "      <td>0.064920</td>\n",
       "      <td>0.029560</td>\n",
       "      <td>0.020310</td>\n",
       "      <td>0.161900</td>\n",
       "      <td>...</td>\n",
       "      <td>13.010000</td>\n",
       "      <td>21.080000</td>\n",
       "      <td>84.110000</td>\n",
       "      <td>515.300000</td>\n",
       "      <td>0.116600</td>\n",
       "      <td>0.147200</td>\n",
       "      <td>0.114500</td>\n",
       "      <td>0.064930</td>\n",
       "      <td>0.250400</td>\n",
       "      <td>0.071460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>9.060240e+05</td>\n",
       "      <td>13.370000</td>\n",
       "      <td>18.840000</td>\n",
       "      <td>86.240000</td>\n",
       "      <td>551.100000</td>\n",
       "      <td>0.095870</td>\n",
       "      <td>0.092630</td>\n",
       "      <td>0.061540</td>\n",
       "      <td>0.033500</td>\n",
       "      <td>0.179200</td>\n",
       "      <td>...</td>\n",
       "      <td>14.970000</td>\n",
       "      <td>25.410000</td>\n",
       "      <td>97.660000</td>\n",
       "      <td>686.500000</td>\n",
       "      <td>0.131300</td>\n",
       "      <td>0.211900</td>\n",
       "      <td>0.226700</td>\n",
       "      <td>0.099930</td>\n",
       "      <td>0.282200</td>\n",
       "      <td>0.080040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.813129e+06</td>\n",
       "      <td>15.780000</td>\n",
       "      <td>21.800000</td>\n",
       "      <td>104.100000</td>\n",
       "      <td>782.700000</td>\n",
       "      <td>0.105300</td>\n",
       "      <td>0.130400</td>\n",
       "      <td>0.130700</td>\n",
       "      <td>0.074000</td>\n",
       "      <td>0.195700</td>\n",
       "      <td>...</td>\n",
       "      <td>18.790000</td>\n",
       "      <td>29.720000</td>\n",
       "      <td>125.400000</td>\n",
       "      <td>1084.000000</td>\n",
       "      <td>0.146000</td>\n",
       "      <td>0.339100</td>\n",
       "      <td>0.382900</td>\n",
       "      <td>0.161400</td>\n",
       "      <td>0.317900</td>\n",
       "      <td>0.092080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.113205e+08</td>\n",
       "      <td>28.110000</td>\n",
       "      <td>39.280000</td>\n",
       "      <td>188.500000</td>\n",
       "      <td>2501.000000</td>\n",
       "      <td>0.163400</td>\n",
       "      <td>0.345400</td>\n",
       "      <td>0.426800</td>\n",
       "      <td>0.201200</td>\n",
       "      <td>0.304000</td>\n",
       "      <td>...</td>\n",
       "      <td>36.040000</td>\n",
       "      <td>49.540000</td>\n",
       "      <td>251.200000</td>\n",
       "      <td>4254.000000</td>\n",
       "      <td>0.222600</td>\n",
       "      <td>1.058000</td>\n",
       "      <td>1.252000</td>\n",
       "      <td>0.291000</td>\n",
       "      <td>0.663800</td>\n",
       "      <td>0.207500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 id  radius_mean  texture_mean  perimeter_mean    area_mean  \\\n",
       "count  5.690000e+02   569.000000    569.000000      569.000000   569.000000   \n",
       "mean   3.037183e+07    14.127292     19.289649       91.969033   654.889104   \n",
       "std    1.250206e+08     3.524049      4.301036       24.298981   351.914129   \n",
       "min    8.670000e+03     6.981000      9.710000       43.790000   143.500000   \n",
       "25%    8.692180e+05    11.700000     16.170000       75.170000   420.300000   \n",
       "50%    9.060240e+05    13.370000     18.840000       86.240000   551.100000   \n",
       "75%    8.813129e+06    15.780000     21.800000      104.100000   782.700000   \n",
       "max    9.113205e+08    28.110000     39.280000      188.500000  2501.000000   \n",
       "\n",
       "       smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
       "count       569.000000        569.000000      569.000000           569.000000   \n",
       "mean          0.096360          0.104341        0.088799             0.048919   \n",
       "std           0.014064          0.052813        0.079720             0.038803   \n",
       "min           0.052630          0.019380        0.000000             0.000000   \n",
       "25%           0.086370          0.064920        0.029560             0.020310   \n",
       "50%           0.095870          0.092630        0.061540             0.033500   \n",
       "75%           0.105300          0.130400        0.130700             0.074000   \n",
       "max           0.163400          0.345400        0.426800             0.201200   \n",
       "\n",
       "       symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
       "count     569.000000  ...    569.000000     569.000000       569.000000   \n",
       "mean        0.181162  ...     16.269190      25.677223       107.261213   \n",
       "std         0.027414  ...      4.833242       6.146258        33.602542   \n",
       "min         0.106000  ...      7.930000      12.020000        50.410000   \n",
       "25%         0.161900  ...     13.010000      21.080000        84.110000   \n",
       "50%         0.179200  ...     14.970000      25.410000        97.660000   \n",
       "75%         0.195700  ...     18.790000      29.720000       125.400000   \n",
       "max         0.304000  ...     36.040000      49.540000       251.200000   \n",
       "\n",
       "        area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
       "count   569.000000        569.000000         569.000000       569.000000   \n",
       "mean    880.583128          0.132369           0.254265         0.272188   \n",
       "std     569.356993          0.022832           0.157336         0.208624   \n",
       "min     185.200000          0.071170           0.027290         0.000000   \n",
       "25%     515.300000          0.116600           0.147200         0.114500   \n",
       "50%     686.500000          0.131300           0.211900         0.226700   \n",
       "75%    1084.000000          0.146000           0.339100         0.382900   \n",
       "max    4254.000000          0.222600           1.058000         1.252000   \n",
       "\n",
       "       concave points_worst  symmetry_worst  fractal_dimension_worst  \n",
       "count            569.000000      569.000000               569.000000  \n",
       "mean               0.114606        0.290076                 0.083946  \n",
       "std                0.065732        0.061867                 0.018061  \n",
       "min                0.000000        0.156500                 0.055040  \n",
       "25%                0.064930        0.250400                 0.071460  \n",
       "50%                0.099930        0.282200                 0.080040  \n",
       "75%                0.161400        0.317900                 0.092080  \n",
       "max                0.291000        0.663800                 0.207500  \n",
       "\n",
       "[8 rows x 31 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4c004226",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:57.086783Z",
     "iopub.status.busy": "2024-08-22T14:01:57.086341Z",
     "iopub.status.idle": "2024-08-22T14:01:58.704021Z",
     "shell.execute_reply": "2024-08-22T14:01:58.702741Z"
    },
    "papermill": {
     "duration": 1.63536,
     "end_time": "2024-08-22T14:01:58.706956",
     "exception": false,
     "start_time": "2024-08-22T14:01:57.071596",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "00fa978f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:58.736116Z",
     "iopub.status.busy": "2024-08-22T14:01:58.735688Z",
     "iopub.status.idle": "2024-08-22T14:01:58.830393Z",
     "shell.execute_reply": "2024-08-22T14:01:58.829040Z"
    },
    "papermill": {
     "duration": 0.111752,
     "end_time": "2024-08-22T14:01:58.833168",
     "exception": false,
     "start_time": "2024-08-22T14:01:58.721416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns = X.columns\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "48154da4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:58.859861Z",
     "iopub.status.busy": "2024-08-22T14:01:58.859427Z",
     "iopub.status.idle": "2024-08-22T14:01:58.868316Z",
     "shell.execute_reply": "2024-08-22T14:01:58.867054Z"
    },
    "papermill": {
     "duration": 0.025161,
     "end_time": "2024-08-22T14:01:58.871080",
     "exception": false,
     "start_time": "2024-08-22T14:01:58.845919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.23640517,  1.09706398, -2.07333501, ...,  2.29607613,\n",
       "         2.75062224,  1.93701461],\n",
       "       [-0.23640344,  1.82982061, -0.35363241, ...,  1.0870843 ,\n",
       "        -0.24388967,  0.28118999],\n",
       "       [ 0.43174109,  1.57988811,  0.45618695, ...,  1.95500035,\n",
       "         1.152255  ,  0.20139121],\n",
       "       ...,\n",
       "       [-0.23572747,  0.70228425,  2.0455738 , ...,  0.41406869,\n",
       "        -1.10454895, -0.31840916],\n",
       "       [-0.23572517,  1.83834103,  2.33645719, ...,  2.28998549,\n",
       "         1.91908301,  2.21963528],\n",
       "       [-0.24240586, -1.80840125,  1.22179204, ..., -1.74506282,\n",
       "        -0.04813821, -0.75120669]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5a55698e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:58.898291Z",
     "iopub.status.busy": "2024-08-22T14:01:58.897857Z",
     "iopub.status.idle": "2024-08-22T14:01:58.903331Z",
     "shell.execute_reply": "2024-08-22T14:01:58.902196Z"
    },
    "papermill": {
     "duration": 0.02195,
     "end_time": "2024-08-22T14:01:58.905881",
     "exception": false,
     "start_time": "2024-08-22T14:01:58.883931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_tranform = pd.DataFrame(X_scaled,columns= columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f8c38eeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:58.933661Z",
     "iopub.status.busy": "2024-08-22T14:01:58.933282Z",
     "iopub.status.idle": "2024-08-22T14:01:58.961349Z",
     "shell.execute_reply": "2024-08-22T14:01:58.960116Z"
    },
    "papermill": {
     "duration": 0.045315,
     "end_time": "2024-08-22T14:01:58.963855",
     "exception": false,
     "start_time": "2024-08-22T14:01:58.918540",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>radius_worst</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.236405</td>\n",
       "      <td>1.097064</td>\n",
       "      <td>-2.073335</td>\n",
       "      <td>1.269934</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>1.568466</td>\n",
       "      <td>3.283515</td>\n",
       "      <td>2.652874</td>\n",
       "      <td>2.532475</td>\n",
       "      <td>2.217515</td>\n",
       "      <td>...</td>\n",
       "      <td>1.886690</td>\n",
       "      <td>-1.359293</td>\n",
       "      <td>2.303601</td>\n",
       "      <td>2.001237</td>\n",
       "      <td>1.307686</td>\n",
       "      <td>2.616665</td>\n",
       "      <td>2.109526</td>\n",
       "      <td>2.296076</td>\n",
       "      <td>2.750622</td>\n",
       "      <td>1.937015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.236403</td>\n",
       "      <td>1.829821</td>\n",
       "      <td>-0.353632</td>\n",
       "      <td>1.685955</td>\n",
       "      <td>1.908708</td>\n",
       "      <td>-0.826962</td>\n",
       "      <td>-0.487072</td>\n",
       "      <td>-0.023846</td>\n",
       "      <td>0.548144</td>\n",
       "      <td>0.001392</td>\n",
       "      <td>...</td>\n",
       "      <td>1.805927</td>\n",
       "      <td>-0.369203</td>\n",
       "      <td>1.535126</td>\n",
       "      <td>1.890489</td>\n",
       "      <td>-0.375612</td>\n",
       "      <td>-0.430444</td>\n",
       "      <td>-0.146749</td>\n",
       "      <td>1.087084</td>\n",
       "      <td>-0.243890</td>\n",
       "      <td>0.281190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.431741</td>\n",
       "      <td>1.579888</td>\n",
       "      <td>0.456187</td>\n",
       "      <td>1.566503</td>\n",
       "      <td>1.558884</td>\n",
       "      <td>0.942210</td>\n",
       "      <td>1.052926</td>\n",
       "      <td>1.363478</td>\n",
       "      <td>2.037231</td>\n",
       "      <td>0.939685</td>\n",
       "      <td>...</td>\n",
       "      <td>1.511870</td>\n",
       "      <td>-0.023974</td>\n",
       "      <td>1.347475</td>\n",
       "      <td>1.456285</td>\n",
       "      <td>0.527407</td>\n",
       "      <td>1.082932</td>\n",
       "      <td>0.854974</td>\n",
       "      <td>1.955000</td>\n",
       "      <td>1.152255</td>\n",
       "      <td>0.201391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.432121</td>\n",
       "      <td>-0.768909</td>\n",
       "      <td>0.253732</td>\n",
       "      <td>-0.592687</td>\n",
       "      <td>-0.764464</td>\n",
       "      <td>3.283553</td>\n",
       "      <td>3.402909</td>\n",
       "      <td>1.915897</td>\n",
       "      <td>1.451707</td>\n",
       "      <td>2.867383</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.281464</td>\n",
       "      <td>0.133984</td>\n",
       "      <td>-0.249939</td>\n",
       "      <td>-0.550021</td>\n",
       "      <td>3.394275</td>\n",
       "      <td>3.893397</td>\n",
       "      <td>1.989588</td>\n",
       "      <td>2.175786</td>\n",
       "      <td>6.046041</td>\n",
       "      <td>4.935010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.432201</td>\n",
       "      <td>1.750297</td>\n",
       "      <td>-1.151816</td>\n",
       "      <td>1.776573</td>\n",
       "      <td>1.826229</td>\n",
       "      <td>0.280372</td>\n",
       "      <td>0.539340</td>\n",
       "      <td>1.371011</td>\n",
       "      <td>1.428493</td>\n",
       "      <td>-0.009560</td>\n",
       "      <td>...</td>\n",
       "      <td>1.298575</td>\n",
       "      <td>-1.466770</td>\n",
       "      <td>1.338539</td>\n",
       "      <td>1.220724</td>\n",
       "      <td>0.220556</td>\n",
       "      <td>-0.313395</td>\n",
       "      <td>0.613179</td>\n",
       "      <td>0.729259</td>\n",
       "      <td>-0.868353</td>\n",
       "      <td>-0.397100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         id  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
       "0 -0.236405     1.097064     -2.073335        1.269934   0.984375   \n",
       "1 -0.236403     1.829821     -0.353632        1.685955   1.908708   \n",
       "2  0.431741     1.579888      0.456187        1.566503   1.558884   \n",
       "3  0.432121    -0.768909      0.253732       -0.592687  -0.764464   \n",
       "4  0.432201     1.750297     -1.151816        1.776573   1.826229   \n",
       "\n",
       "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
       "0         1.568466          3.283515        2.652874             2.532475   \n",
       "1        -0.826962         -0.487072       -0.023846             0.548144   \n",
       "2         0.942210          1.052926        1.363478             2.037231   \n",
       "3         3.283553          3.402909        1.915897             1.451707   \n",
       "4         0.280372          0.539340        1.371011             1.428493   \n",
       "\n",
       "   symmetry_mean  ...  radius_worst  texture_worst  perimeter_worst  \\\n",
       "0       2.217515  ...      1.886690      -1.359293         2.303601   \n",
       "1       0.001392  ...      1.805927      -0.369203         1.535126   \n",
       "2       0.939685  ...      1.511870      -0.023974         1.347475   \n",
       "3       2.867383  ...     -0.281464       0.133984        -0.249939   \n",
       "4      -0.009560  ...      1.298575      -1.466770         1.338539   \n",
       "\n",
       "   area_worst  smoothness_worst  compactness_worst  concavity_worst  \\\n",
       "0    2.001237          1.307686           2.616665         2.109526   \n",
       "1    1.890489         -0.375612          -0.430444        -0.146749   \n",
       "2    1.456285          0.527407           1.082932         0.854974   \n",
       "3   -0.550021          3.394275           3.893397         1.989588   \n",
       "4    1.220724          0.220556          -0.313395         0.613179   \n",
       "\n",
       "   concave points_worst  symmetry_worst  fractal_dimension_worst  \n",
       "0              2.296076        2.750622                 1.937015  \n",
       "1              1.087084       -0.243890                 0.281190  \n",
       "2              1.955000        1.152255                 0.201391  \n",
       "3              2.175786        6.046041                 4.935010  \n",
       "4              0.729259       -0.868353                -0.397100  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_tranform.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "223101aa",
   "metadata": {
    "papermill": {
     "duration": 0.012514,
     "end_time": "2024-08-22T14:01:58.989316",
     "exception": false,
     "start_time": "2024-08-22T14:01:58.976802",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e8fc24f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:59.017251Z",
     "iopub.status.busy": "2024-08-22T14:01:59.016366Z",
     "iopub.status.idle": "2024-08-22T14:01:59.021937Z",
     "shell.execute_reply": "2024-08-22T14:01:59.020717Z"
    },
    "papermill": {
     "duration": 0.022343,
     "end_time": "2024-08-22T14:01:59.024425",
     "exception": false,
     "start_time": "2024-08-22T14:01:59.002082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c757e1fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:59.052111Z",
     "iopub.status.busy": "2024-08-22T14:01:59.051350Z",
     "iopub.status.idle": "2024-08-22T14:01:59.206257Z",
     "shell.execute_reply": "2024-08-22T14:01:59.204708Z"
    },
    "papermill": {
     "duration": 0.17404,
     "end_time": "2024-08-22T14:01:59.211326",
     "exception": false,
     "start_time": "2024-08-22T14:01:59.037286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "scores = cross_val_score(lr, X_tranform, y, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c586f5b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:59.274833Z",
     "iopub.status.busy": "2024-08-22T14:01:59.274092Z",
     "iopub.status.idle": "2024-08-22T14:01:59.283332Z",
     "shell.execute_reply": "2024-08-22T14:01:59.281845Z"
    },
    "papermill": {
     "duration": 0.049233,
     "end_time": "2024-08-22T14:01:59.288967",
     "exception": false,
     "start_time": "2024-08-22T14:01:59.239734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Values of the various cross-val-scores are [0.98245614 0.97368421 0.97368421 0.97368421 0.99115044]\n",
      "Values of the mean of various cross-val-scores is 0.9789318428815402\n"
     ]
    }
   ],
   "source": [
    "print(\"Values of the various cross-val-scores are\",scores)\n",
    "print(\"Values of the mean of various cross-val-scores is\",np.mean(scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "397238c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:59.332054Z",
     "iopub.status.busy": "2024-08-22T14:01:59.331651Z",
     "iopub.status.idle": "2024-08-22T14:01:59.340320Z",
     "shell.execute_reply": "2024-08-22T14:01:59.339342Z"
    },
    "papermill": {
     "duration": 0.025517,
     "end_time": "2024-08-22T14:01:59.342728",
     "exception": false,
     "start_time": "2024-08-22T14:01:59.317211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_tranform, y, test_size=0.3, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "4a76259a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:59.370313Z",
     "iopub.status.busy": "2024-08-22T14:01:59.369909Z",
     "iopub.status.idle": "2024-08-22T14:01:59.406795Z",
     "shell.execute_reply": "2024-08-22T14:01:59.405080Z"
    },
    "papermill": {
     "duration": 0.055369,
     "end_time": "2024-08-22T14:01:59.410967",
     "exception": false,
     "start_time": "2024-08-22T14:01:59.355598",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr1 = LogisticRegression()\n",
    "lr1.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f3e59ea3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:59.471218Z",
     "iopub.status.busy": "2024-08-22T14:01:59.470024Z",
     "iopub.status.idle": "2024-08-22T14:01:59.487048Z",
     "shell.execute_reply": "2024-08-22T14:01:59.485382Z"
    },
    "papermill": {
     "duration": 0.053038,
     "end_time": "2024-08-22T14:01:59.492702",
     "exception": false,
     "start_time": "2024-08-22T14:01:59.439664",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = lr1.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a5f40eaf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:59.535060Z",
     "iopub.status.busy": "2024-08-22T14:01:59.534559Z",
     "iopub.status.idle": "2024-08-22T14:01:59.542135Z",
     "shell.execute_reply": "2024-08-22T14:01:59.541073Z"
    },
    "papermill": {
     "duration": 0.025719,
     "end_time": "2024-08-22T14:01:59.544515",
     "exception": false,
     "start_time": "2024-08-22T14:01:59.518796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['M', 'B'], dtype=object)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "a5abc2d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:59.573867Z",
     "iopub.status.busy": "2024-08-22T14:01:59.572845Z",
     "iopub.status.idle": "2024-08-22T14:01:59.596576Z",
     "shell.execute_reply": "2024-08-22T14:01:59.594939Z"
    },
    "papermill": {
     "duration": 0.04116,
     "end_time": "2024-08-22T14:01:59.599409",
     "exception": false,
     "start_time": "2024-08-22T14:01:59.558249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           M       0.99      0.98      0.99       108\n",
      "           B       0.97      0.98      0.98        63\n",
      "\n",
      "    accuracy                           0.98       171\n",
      "   macro avg       0.98      0.98      0.98       171\n",
      "weighted avg       0.98      0.98      0.98       171\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "report = classification_report(y_test,y_pred,target_names=['M','B'])\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e18cc362",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:59.628740Z",
     "iopub.status.busy": "2024-08-22T14:01:59.628311Z",
     "iopub.status.idle": "2024-08-22T14:01:59.652172Z",
     "shell.execute_reply": "2024-08-22T14:01:59.650613Z"
    },
    "papermill": {
     "duration": 0.043712,
     "end_time": "2024-08-22T14:01:59.656683",
     "exception": false,
     "start_time": "2024-08-22T14:01:59.612971",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "# Initialize PCA, specifying the number of components (e.g., 2 components)\n",
    "pca = PCA()\n",
    "\n",
    "# Fit PCA on the scaled data\n",
    "X_pca = pca.fit_transform(X_tranform)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "eca3de94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:01:59.716855Z",
     "iopub.status.busy": "2024-08-22T14:01:59.716172Z",
     "iopub.status.idle": "2024-08-22T14:01:59.992668Z",
     "shell.execute_reply": "2024-08-22T14:01:59.991508Z"
    },
    "papermill": {
     "duration": 0.310361,
     "end_time": "2024-08-22T14:01:59.995380",
     "exception": false,
     "start_time": "2024-08-22T14:01:59.685019",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7ec924c5b040>]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(np.cumsum(pca.explained_variance_ratio_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "68e3d8b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:02:00.025418Z",
     "iopub.status.busy": "2024-08-22T14:02:00.024983Z",
     "iopub.status.idle": "2024-08-22T14:02:00.418858Z",
     "shell.execute_reply": "2024-08-22T14:02:00.417372Z"
    },
    "papermill": {
     "duration": 0.413548,
     "end_time": "2024-08-22T14:02:00.423051",
     "exception": false,
     "start_time": "2024-08-22T14:02:00.009503",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i in range(1,30):\n",
    "    pca = PCA(n_components=i)\n",
    "    X_pca = pca.fit_transform(X_tranform)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8e5c5d62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:02:00.533301Z",
     "iopub.status.busy": "2024-08-22T14:02:00.532604Z",
     "iopub.status.idle": "2024-08-22T14:02:00.542205Z",
     "shell.execute_reply": "2024-08-22T14:02:00.541068Z"
    },
    "papermill": {
     "duration": 0.055868,
     "end_time": "2024-08-22T14:02:00.544544",
     "exception": false,
     "start_time": "2024-08-22T14:02:00.488676",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.33114519e+01, 5.70683496e+00, 2.84038694e+00, 1.98484548e+00,\n",
       "       1.65171815e+00, 1.23684643e+00, 9.79995551e-01, 6.72935632e-01,\n",
       "       4.61603682e-01, 4.03842838e-01, 3.49769685e-01, 2.94407846e-01,\n",
       "       2.61606691e-01, 2.41755091e-01, 1.57250011e-01, 9.42942450e-02,\n",
       "       7.99504590e-02, 5.91502270e-02, 5.26837847e-02, 4.92084099e-02,\n",
       "       3.11254863e-02, 2.99939190e-02, 2.74788170e-02, 2.42917142e-02,\n",
       "       1.80711203e-02, 1.55069827e-02, 8.18608563e-03, 6.91024741e-03,\n",
       "       1.59213568e-03])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.explained_variance_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bfe11317",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:02:00.574931Z",
     "iopub.status.busy": "2024-08-22T14:02:00.574517Z",
     "iopub.status.idle": "2024-08-22T14:02:00.594915Z",
     "shell.execute_reply": "2024-08-22T14:02:00.593758Z"
    },
    "papermill": {
     "duration": 0.03855,
     "end_time": "2024-08-22T14:02:00.597458",
     "exception": false,
     "start_time": "2024-08-22T14:02:00.558908",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 2.29121629e-02,  2.18913018e-01,  1.03843884e-01,\n",
       "         2.27534912e-01,  2.21045775e-01,  1.42414707e-01,\n",
       "         2.39067299e-01,  2.58280254e-01,  2.60738114e-01,\n",
       "         1.37977741e-01,  6.41477914e-02,  2.06117467e-01,\n",
       "         1.74133924e-02,  2.11446519e-01,  2.03076420e-01,\n",
       "         1.46782103e-02,  1.70288397e-01,  1.53543673e-01,\n",
       "         1.83406751e-01,  4.24155186e-02,  1.02496073e-01,\n",
       "         2.28009352e-01,  1.04515447e-01,  2.36637339e-01,\n",
       "         2.24932135e-01,  1.27824406e-01,  2.09884561e-01,\n",
       "         2.28602175e-01,  2.50746203e-01,  1.22679932e-01,\n",
       "         1.31560243e-01],\n",
       "       [-3.40684907e-02, -2.33271401e-01, -6.00441986e-02,\n",
       "        -2.14589002e-01, -2.30668816e-01,  1.86422211e-01,\n",
       "         1.52454726e-01,  6.05416253e-02, -3.41673916e-02,\n",
       "         1.90684979e-01,  3.66531055e-01, -1.05935702e-01,\n",
       "         8.95477887e-02, -8.98070428e-02, -1.52771289e-01,\n",
       "         2.03189876e-01,  2.32503362e-01,  1.96846081e-01,\n",
       "         1.29965181e-01,  1.83558627e-01,  2.79584139e-01,\n",
       "        -2.19296044e-01, -4.55012225e-02, -1.99295985e-01,\n",
       "        -2.18985461e-01,  1.72562959e-01,  1.44253637e-01,\n",
       "         9.85265243e-02, -7.53436736e-03,  1.42619436e-01,\n",
       "         2.75702077e-01],\n",
       "       [ 9.69384357e-02, -1.13937863e-02,  6.68923422e-02,\n",
       "        -1.21247907e-02,  2.62931497e-02, -1.03182400e-01,\n",
       "        -7.47686230e-02,  1.75873594e-03, -2.75796069e-02,\n",
       "        -4.09620321e-02, -2.08178746e-02,  2.66917221e-01,\n",
       "         3.71439885e-01,  2.64925682e-01,  2.15790250e-01,\n",
       "         3.11787845e-01,  1.54557465e-01,  1.76560052e-01,\n",
       "         2.23850479e-01,  2.85265066e-01,  2.11893354e-01,\n",
       "        -4.94063395e-02, -3.98289339e-02, -5.04319449e-02,\n",
       "        -1.31888912e-02, -2.55328751e-01, -2.34513609e-01,\n",
       "        -1.72024941e-01, -1.70480673e-01, -2.70515902e-01,\n",
       "        -2.29474476e-01],\n",
       "       [-2.65980453e-02,  4.21879503e-02, -6.02954308e-01,\n",
       "         4.27527972e-02,  5.41147240e-02,  1.58098177e-01,\n",
       "         3.18181168e-02,  1.94971242e-02,  6.57853527e-02,\n",
       "         6.75025426e-02,  4.79578564e-02,  9.91144458e-02,\n",
       "        -3.56497230e-01,  9.02930555e-02,  1.08568705e-01,\n",
       "         4.43686639e-02, -2.64253603e-02,  2.24829120e-03,\n",
       "         7.52522324e-02,  4.69361262e-02,  1.62124502e-02,\n",
       "         1.56597047e-02, -6.33119655e-01,  1.40685717e-02,\n",
       "         2.59706715e-02,  1.45233595e-02, -9.25621677e-02,\n",
       "        -7.48071883e-02,  5.30597982e-03, -3.71294655e-02,\n",
       "        -7.89714892e-02],\n",
       "       [-1.13275871e-02,  3.81298606e-02, -4.90914502e-02,\n",
       "         3.77155917e-02,  1.05622290e-02, -3.65750055e-01,\n",
       "         1.17866372e-02,  8.65125060e-02, -4.36674117e-02,\n",
       "        -3.05378893e-01, -4.47679064e-02, -1.54254367e-01,\n",
       "        -1.90001500e-01, -1.20703357e-01, -1.27765023e-01,\n",
       "        -2.32745603e-01,  2.80298048e-01,  3.54164595e-01,\n",
       "         1.95758558e-01, -2.51331178e-01,  2.63395188e-01,\n",
       "        -4.28003421e-03, -9.25518597e-02,  7.59914369e-03,\n",
       "        -2.74135953e-02, -3.25860028e-01,  1.21503371e-01,\n",
       "         1.88280510e-01,  4.31235727e-02, -2.44245936e-01,\n",
       "         9.36990782e-02],\n",
       "       [ 3.16733438e-01, -2.95885214e-02,  3.13943235e-02,\n",
       "        -2.83940081e-02, -6.11315511e-03,  2.62508993e-01,\n",
       "         4.90389406e-03,  2.35633784e-03,  3.45092730e-02,\n",
       "        -3.35082168e-01,  1.12784169e-01,  2.32611990e-02,\n",
       "        -2.28569116e-02, -3.82015070e-03,  5.19588353e-02,\n",
       "         3.30867850e-01, -6.67881201e-02, -4.96991037e-02,\n",
       "         2.31975263e-02, -4.77530515e-01,  4.84623730e-02,\n",
       "        -4.52173650e-03,  4.51745156e-02, -1.29211658e-02,\n",
       "         2.40333377e-02,  3.65048687e-01, -3.40427143e-02,\n",
       "        -1.79620401e-02,  2.95490998e-02, -4.51404312e-01,\n",
       "         9.24796979e-02],\n",
       "       [ 9.07115632e-01, -4.22987777e-02,  1.49935618e-02,\n",
       "        -4.35888242e-02, -2.89256668e-02, -1.40340362e-01,\n",
       "        -4.53031106e-02, -3.25530646e-02, -8.14216298e-02,\n",
       "         1.18259236e-01, -4.10588768e-02,  1.67882718e-02,\n",
       "        -1.90267647e-01,  1.95081762e-02,  5.65606078e-02,\n",
       "        -6.78348099e-02,  2.22220211e-02,  3.36810725e-02,\n",
       "        -3.78517870e-02,  1.18403261e-01, -1.57602244e-02,\n",
       "        -1.66458140e-02, -9.46012397e-03, -1.45260986e-02,\n",
       "        -7.37260183e-04, -6.70682168e-02,  5.07556727e-02,\n",
       "         3.52007117e-02, -2.07238959e-02,  2.34014329e-01,\n",
       "         3.47167538e-02],\n",
       "       [-9.63624150e-02, -1.16427419e-01,  1.87548206e-03,\n",
       "        -1.06272097e-01, -4.74145683e-02, -1.23541189e-01,\n",
       "         4.31459676e-02, -1.02436021e-01, -1.36923237e-01,\n",
       "        -9.88745312e-02,  3.06499872e-01,  3.07415709e-01,\n",
       "        -5.26324770e-02,  3.11265679e-01,  3.34287959e-01,\n",
       "        -2.60833914e-01,  2.10019435e-02, -2.19193299e-01,\n",
       "        -3.70217167e-01, -8.48547675e-02,  1.94418818e-01,\n",
       "        -7.50830655e-03,  6.61764040e-03,  2.16248810e-03,\n",
       "         6.61731861e-02, -1.16496117e-01,  1.36509363e-01,\n",
       "        -6.70857444e-02, -1.66500918e-01, -4.14396326e-02,\n",
       "         3.72034479e-01],\n",
       "       [-1.49115642e-01,  4.62708347e-02,  8.87271675e-02,\n",
       "         3.62307377e-02,  8.06498555e-02, -2.78996404e-01,\n",
       "        -9.92140483e-02, -7.57504642e-02, -1.16569072e-01,\n",
       "        -3.15150303e-01, -1.30639482e-01, -2.62004557e-02,\n",
       "        -3.72989606e-01, -5.28601137e-02,  3.06278923e-02,\n",
       "         5.80789293e-01,  1.48593714e-01, -3.47150979e-02,\n",
       "        -1.89022962e-01,  2.92785738e-01,  6.02032019e-02,\n",
       "         7.02245898e-02,  8.57180911e-03,  5.88542232e-02,\n",
       "         9.70346497e-02,  1.73257498e-01,  1.11218083e-01,\n",
       "         3.54673774e-02, -5.23224729e-02,  1.88266324e-01,\n",
       "         8.72224417e-02],\n",
       "       [-1.69267515e-01, -2.24027044e-01,  1.19456735e-01,\n",
       "        -2.26345171e-01, -1.86003854e-01, -6.13382189e-02,\n",
       "        -1.95186018e-01,  3.39556280e-02, -1.42616778e-01,\n",
       "         1.35614519e-01, -1.58481169e-01,  2.65044027e-01,\n",
       "        -3.15210842e-01,  2.37892875e-01,  2.49664053e-01,\n",
       "        -1.01597964e-02, -1.15183433e-01,  3.65921410e-01,\n",
       "         2.15187518e-01, -2.20495585e-01, -2.26379968e-01,\n",
       "        -9.98102543e-02,  1.06692963e-01, -9.82169314e-02,\n",
       "        -6.17978735e-02,  1.69127525e-01, -6.44528977e-02,\n",
       "         1.96619863e-01,  5.12161119e-02,  1.03089008e-01,\n",
       "        -1.12913994e-01],\n",
       "       [-5.81889971e-02,  7.94660810e-02,  2.53258091e-01,\n",
       "         6.98659290e-02,  6.27953721e-02, -8.46615487e-02,\n",
       "        -5.17284121e-03, -1.34664686e-01, -6.12485985e-03,\n",
       "         5.74417320e-01,  6.64561118e-02, -2.58472816e-02,\n",
       "        -3.23158815e-01, -9.48674415e-02, -7.19915602e-02,\n",
       "         1.79568831e-01,  3.86157487e-02, -1.13536362e-01,\n",
       "         9.40668503e-02, -3.28314881e-01,  3.53844543e-01,\n",
       "         7.30130139e-02,  3.85612500e-02,  4.57509789e-02,\n",
       "         6.88223289e-02, -1.09278029e-01, -1.75401648e-01,\n",
       "        -2.95581609e-01, -7.54967518e-02, -1.92234507e-02,\n",
       "         7.07163375e-03],\n",
       "       [ 6.72125159e-03,  4.22137877e-02, -3.04032359e-01,\n",
       "         1.75730552e-02,  1.10760120e-01, -1.35321954e-01,\n",
       "        -3.07036205e-01,  1.24553100e-01, -7.15646861e-02,\n",
       "         1.61058144e-01, -3.73187087e-02, -2.70302500e-02,\n",
       "         3.48396233e-01, -1.68501485e-01,  5.07314962e-02,\n",
       "         8.17533738e-02, -2.06959272e-01,  3.48342358e-01,\n",
       "        -3.42855186e-01, -1.85998712e-01,  2.50428852e-01,\n",
       "         1.05030701e-01,  1.24903478e-02,  5.11251580e-02,\n",
       "         1.84460981e-01,  1.42996001e-01, -1.96805544e-01,\n",
       "         1.84959562e-01, -1.17518361e-01,  1.57210098e-01,\n",
       "         1.18625115e-01],\n",
       "       [-4.84108383e-03,  5.06039273e-02,  2.56273666e-01,\n",
       "         3.84703922e-02,  6.50475496e-02,  3.15872261e-01,\n",
       "        -1.04264618e-01,  6.57233933e-02,  4.22531132e-02,\n",
       "        -2.88054252e-01,  2.36120382e-01, -1.56255783e-02,\n",
       "        -3.08499115e-01, -1.00597125e-01, -1.72264457e-02,\n",
       "        -2.93287983e-01, -2.63398426e-01,  2.51864823e-01,\n",
       "        -6.43058418e-03,  3.19874237e-01,  2.75943072e-01,\n",
       "         3.95822173e-02,  8.01420887e-02, -9.08476215e-03,\n",
       "         4.79867665e-02,  5.69314084e-02, -3.71991007e-01,\n",
       "        -8.68703681e-02, -6.83672542e-02,  4.39377221e-02,\n",
       "        -3.51346417e-02],\n",
       "       [ 6.50009912e-03,  1.24969877e-02,  2.01876125e-01,\n",
       "         4.46844299e-02,  6.78792438e-02,  4.64616241e-02,\n",
       "         2.30005458e-01,  3.87349680e-01,  1.32637847e-01,\n",
       "         1.89570545e-01,  1.06390748e-01, -6.96358074e-02,\n",
       "        -1.65408488e-01, -3.88654619e-02,  5.56877089e-02,\n",
       "         1.49148603e-01,  1.03207129e-02,  1.57777595e-01,\n",
       "        -4.94527095e-01,  1.08360305e-02, -2.40767973e-01,\n",
       "        -1.38036550e-01, -8.07371401e-02, -9.70043761e-02,\n",
       "        -1.01235629e-01, -2.06026671e-01,  1.31173339e-02,\n",
       "         2.18055908e-01, -2.54345228e-01, -2.56766084e-01,\n",
       "        -1.72524501e-01],\n",
       "       [-6.88594292e-03,  5.90545533e-02, -2.07011241e-02,\n",
       "         4.80192215e-02,  1.01522794e-02,  4.44044654e-01,\n",
       "         7.66116608e-03, -1.89733740e-01, -2.45219266e-01,\n",
       "         3.09038402e-02, -3.77436108e-01,  1.19598770e-02,\n",
       "        -1.26141920e-02, -4.43584774e-02,  8.32030503e-02,\n",
       "        -2.00139961e-01,  4.91903153e-01,  1.35322845e-01,\n",
       "        -1.99547389e-01, -4.73405933e-02,  1.45958050e-01,\n",
       "         2.35260247e-02,  5.38979607e-02,  1.25590010e-02,\n",
       "        -6.64619187e-03,  1.63389545e-01,  1.65941776e-01,\n",
       "        -6.68546621e-02, -2.76401728e-01,  5.44873358e-03,\n",
       "        -2.12520491e-01],\n",
       "       [-2.75349185e-03,  5.07891563e-02,  1.08089530e-01,\n",
       "         3.95904764e-02, -1.46360498e-02,  1.17493291e-01,\n",
       "        -2.30759682e-01,  1.28386008e-01,  2.17299938e-01,\n",
       "         7.39505965e-02, -5.18333769e-01,  1.11103952e-01,\n",
       "        -3.33890485e-02,  8.99173425e-03,  4.51716376e-02,\n",
       "        -1.84142320e-02, -1.67886977e-01, -2.50292522e-01,\n",
       "        -6.25487163e-02,  1.13219397e-01,  3.53782637e-01,\n",
       "        -1.66213790e-01, -1.00862417e-01, -1.82407021e-01,\n",
       "        -3.15142865e-01, -4.52267152e-02,  4.96136066e-02,\n",
       "         2.04743734e-01,  1.69597618e-01, -1.39913723e-01,\n",
       "         2.55448214e-01],\n",
       "       [ 7.77998301e-03, -1.50008977e-01, -1.59152972e-01,\n",
       "        -1.13792993e-01, -1.30173978e-01, -2.03117911e-01,\n",
       "         1.70379447e-01,  2.70010606e-01,  3.81111880e-01,\n",
       "        -1.65691481e-01, -3.91197133e-02,  5.51188796e-02,\n",
       "        -3.27687771e-02,  2.39290106e-02,  4.55382377e-02,\n",
       "        -5.83266864e-02,  1.90065826e-01, -1.26034946e-01,\n",
       "        -1.97671940e-01, -1.58541381e-01,  2.67180143e-01,\n",
       "        -8.34598766e-02,  1.85972310e-01, -5.66492787e-02,\n",
       "        -9.03250363e-02,  1.42781922e-01, -1.53347954e-01,\n",
       "        -2.16302398e-01,  1.78353485e-01,  2.60033510e-01,\n",
       "        -4.04957673e-01],\n",
       "       [-1.97073716e-02,  2.09908003e-01, -3.41617578e-02,\n",
       "         2.01233658e-01,  2.51460456e-01,  1.68171613e-01,\n",
       "        -1.63028600e-02, -5.07159027e-03,  2.87418892e-02,\n",
       "        -1.94702559e-01,  4.62989861e-02, -1.24562479e-01,\n",
       "         4.16528128e-02, -9.08413012e-03,  3.13148246e-01,\n",
       "         1.45306166e-01, -1.56106914e-02,  9.23456180e-02,\n",
       "         1.06747906e-01, -2.79918359e-01, -1.22002438e-01,\n",
       "        -2.35215809e-01,  6.59926562e-02, -2.28493742e-01,\n",
       "        -2.86471546e-01, -2.76751162e-01, -3.68342360e-03,\n",
       "        -1.90307542e-01, -8.51800572e-02,  4.36706158e-01,\n",
       "         1.62920272e-01],\n",
       "       [-5.44224782e-03,  1.56773206e-01, -4.00486871e-02,\n",
       "         1.68413120e-01,  2.69145594e-01, -3.54463321e-01,\n",
       "         1.42591317e-02, -2.79739373e-02, -8.70655937e-02,\n",
       "         1.69168737e-01,  8.67795014e-02, -2.31233991e-01,\n",
       "        -9.17744999e-03, -1.45084878e-02,  2.96273515e-01,\n",
       "        -2.28819703e-01,  9.41083798e-02,  5.79429684e-03,\n",
       "         4.69447960e-02,  1.80195394e-01, -5.99708395e-02,\n",
       "        -2.18781792e-01,  5.72505720e-02, -1.89279122e-01,\n",
       "        -1.58722686e-01,  5.04565504e-01, -7.36272293e-02,\n",
       "        -1.07894455e-01,  6.71829959e-02, -2.69313654e-01,\n",
       "         2.66748887e-02],\n",
       "       [-2.04549082e-02, -2.11821385e-01, -2.99317051e-02,\n",
       "        -2.27079273e-01,  4.54996253e-02,  1.60358262e-01,\n",
       "        -2.92092522e-01, -7.19744605e-03,  1.53991624e-01,\n",
       "         5.85033287e-02,  6.28799475e-02, -1.81436577e-01,\n",
       "        -3.86812908e-02, -3.64045783e-01,  4.33949999e-01,\n",
       "         1.39326776e-02,  2.50216687e-01, -1.19490304e-01,\n",
       "         1.58510661e-02,  8.42424600e-02, -9.70826600e-02,\n",
       "        -2.77411371e-02,  8.08808405e-02, -1.05666112e-01,\n",
       "         3.93681440e-01, -2.28506719e-01, -2.55443716e-02,\n",
       "         3.58393052e-02,  2.61323873e-01, -1.11738683e-01,\n",
       "         2.25166004e-02],\n",
       "       [ 9.87091673e-03,  4.60095073e-02,  2.64801220e-01,\n",
       "         1.51222054e-02,  8.73452982e-02, -2.38420108e-02,\n",
       "        -4.76395571e-01,  3.77710617e-02,  2.31546040e-01,\n",
       "        -3.07767610e-02,  1.72565576e-01,  9.05644577e-02,\n",
       "         8.35893816e-02,  1.69586632e-01, -2.70679518e-01,\n",
       "        -9.53708090e-02,  4.51033960e-01, -7.02032509e-02,\n",
       "        -6.48488839e-02, -1.12133933e-01, -2.14213177e-01,\n",
       "         6.48126680e-03, -3.30244412e-01, -1.05441073e-02,\n",
       "        -5.35108242e-02,  1.40127867e-01, -2.20884131e-01,\n",
       "         4.71665440e-02, -3.97409292e-02,  1.25617213e-01,\n",
       "         9.53666792e-02],\n",
       "       [-6.19570677e-03, -7.03943872e-02,  4.36269565e-01,\n",
       "        -7.09634042e-02, -2.16729984e-02, -1.17945821e-01,\n",
       "         2.13187888e-01,  1.27011434e-03, -1.74932967e-02,\n",
       "        -8.50677858e-02, -8.51040051e-02,  8.56605924e-02,\n",
       "         2.12168357e-01, -3.17246026e-01,  2.07916141e-01,\n",
       "        -6.66029744e-02, -1.59332265e-01,  7.10238419e-02,\n",
       "         3.55577784e-02, -9.21936254e-02,  6.91716681e-02,\n",
       "         7.06817993e-03, -5.78095532e-01, -9.44576784e-02,\n",
       "         1.49328216e-01,  1.56936236e-01,  1.91897773e-01,\n",
       "        -1.39729448e-01,  6.87063968e-03,  1.55827542e-01,\n",
       "        -9.27697367e-02],\n",
       "       [-3.19033693e-03,  7.30219736e-02,  9.58907044e-02,\n",
       "         7.48217045e-02,  9.74288040e-02,  6.37413129e-02,\n",
       "        -9.42546640e-02, -1.88862925e-01, -3.13280824e-01,\n",
       "        -1.83311112e-02,  2.86892578e-01, -1.47793165e-01,\n",
       "         4.87612013e-02,  1.53859020e-01,  6.87457904e-02,\n",
       "         5.18522468e-02, -4.89707571e-02, -2.00850815e-01,\n",
       "        -7.44941428e-02, -8.43245699e-02,  2.45408452e-01,\n",
       "        -9.62926943e-02, -1.11968438e-01,  1.49522443e-02,\n",
       "        -9.67987025e-02, -6.96605805e-02,  3.33737058e-02,\n",
       "         4.56817799e-01,  3.05694162e-01,  9.64266753e-02,\n",
       "        -4.70358007e-01],\n",
       "       [-1.02890273e-02, -9.87043219e-02,  1.31128475e-03,\n",
       "        -4.05009427e-02,  9.39647037e-03, -2.00882039e-02,\n",
       "         5.82952700e-02,  3.21062737e-01, -5.79746842e-02,\n",
       "        -5.20047671e-02, -8.47010812e-02, -2.63799753e-01,\n",
       "        -1.15085792e-03,  8.13842226e-02,  1.10258620e-01,\n",
       "        -5.71540677e-02,  3.99380578e-03, -3.88573085e-01,\n",
       "         3.54040783e-01, -4.34554772e-02,  8.95941964e-02,\n",
       "        -5.77684581e-02, -9.47343543e-03,  5.86984409e-02,\n",
       "         1.93293235e-01,  9.11346100e-02, -1.45389941e-01,\n",
       "         2.90302924e-01, -5.63297713e-01,  1.22996111e-01,\n",
       "         2.77511176e-03],\n",
       "       [ 4.23338835e-03,  1.83664583e-01, -9.94415450e-02,\n",
       "         1.17262178e-01, -7.05570410e-02, -6.89400486e-02,\n",
       "         1.02198309e-01, -4.55505273e-02, -8.23499555e-02,\n",
       "        -1.88414913e-02,  1.34601525e-01,  5.61133900e-01,\n",
       "        -2.39385913e-02, -5.16048248e-01,  1.85466929e-02,\n",
       "        -1.61939343e-02,  1.22457873e-01, -1.86159613e-01,\n",
       "         1.07166573e-01, -2.61381098e-03, -7.61777995e-02,\n",
       "         1.58114412e-01,  1.18609952e-01, -2.36463109e-01,\n",
       "        -1.46339946e-01,  1.12249345e-02, -1.85437121e-01,\n",
       "         2.86701322e-01, -1.05286798e-01,  1.31934552e-02,\n",
       "        -3.78821669e-02],\n",
       "       [-1.32609967e-03,  1.85941765e-02, -8.44205892e-02,\n",
       "        -2.74348776e-02,  2.10570998e-01, -2.87610035e-02,\n",
       "        -3.96513463e-01,  9.71797703e-02,  1.86301142e-01,\n",
       "         2.45105281e-02,  2.06705021e-01,  1.73397836e-01,\n",
       "        -5.70916483e-02, -7.21720148e-02, -1.30937229e-01,\n",
       "        -3.10055052e-02, -1.73649844e-01, -1.60095201e-02,\n",
       "         1.29990492e-01,  1.93631301e-02,  8.45810875e-02,\n",
       "        -7.14411165e-02,  1.18022193e-01, -1.17905355e-01,\n",
       "         3.92125093e-02,  4.78715412e-02,  6.24717268e-01,\n",
       "        -1.15867683e-01, -2.63527823e-01, -4.50535742e-02,\n",
       "        -2.80155741e-01],\n",
       "       [ 2.57132397e-03, -1.28713229e-01, -2.48212238e-02,\n",
       "        -1.24670225e-01,  3.61014547e-01, -3.73728324e-02,\n",
       "         2.62695425e-01, -5.50227716e-01,  3.89316679e-01,\n",
       "        -1.59103684e-02, -9.67968041e-02,  5.04119526e-02,\n",
       "        -1.08931750e-02,  1.03485879e-01, -1.55929011e-01,\n",
       "        -8.06656641e-03, -4.94045349e-02,  9.19313644e-02,\n",
       "        -1.86741100e-02, -1.69911968e-02,  3.51569060e-02,\n",
       "        -1.95812320e-01,  3.63471072e-02, -2.43266456e-01,\n",
       "         2.29813188e-01,  1.28603354e-02, -1.00772153e-01,\n",
       "         2.67236886e-01, -1.33749940e-01,  2.78249156e-02,\n",
       "         4.50088389e-03],\n",
       "       [ 1.62387479e-03, -1.31697326e-01, -1.76226344e-02,\n",
       "        -1.15650274e-01,  4.67489167e-01,  6.94828055e-02,\n",
       "         9.86246378e-02,  3.63040016e-01, -4.53345398e-01,\n",
       "        -1.51575933e-02, -1.01343150e-01,  2.13735821e-01,\n",
       "        -9.92569870e-03,  4.19891996e-02, -3.14758068e-01,\n",
       "        -9.31236546e-03,  4.66515008e-02, -8.38246452e-02,\n",
       "        -1.16756996e-02, -1.98911122e-02, -1.21417853e-02,\n",
       "        -1.78796461e-01,  2.14738420e-02, -2.41658719e-01,\n",
       "         2.37323945e-01, -4.07302066e-02, -7.10874335e-02,\n",
       "        -1.42148446e-01,  2.30794105e-01,  2.26958084e-02,\n",
       "         6.00813707e-02],\n",
       "       [-1.89172407e-05,  2.11196846e-01, -6.36250749e-05,\n",
       "         8.43427983e-02, -2.72516694e-01,  1.48003792e-03,\n",
       "        -5.46665580e-03,  4.55413764e-02, -8.88570705e-03,\n",
       "         1.43258073e-03, -6.31229117e-03, -1.92229037e-01,\n",
       "        -5.62497437e-03,  2.63190513e-01, -4.20566818e-02,\n",
       "         9.79583542e-03, -1.53975672e-02,  5.81998541e-03,\n",
       "        -2.90049735e-02, -7.63785602e-03,  1.97579130e-02,\n",
       "         4.12629605e-01, -3.89698820e-04, -7.28678951e-01,\n",
       "         2.38967923e-01, -1.53594058e-03,  4.86951154e-02,\n",
       "        -1.76417406e-02,  2.24734036e-02,  4.92209992e-03,\n",
       "        -2.35628340e-02]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca.components_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d03d7405",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:02:00.630141Z",
     "iopub.status.busy": "2024-08-22T14:02:00.629695Z",
     "iopub.status.idle": "2024-08-22T14:02:00.643980Z",
     "shell.execute_reply": "2024-08-22T14:02:00.642511Z"
    },
    "papermill": {
     "duration": 0.035563,
     "end_time": "2024-08-22T14:02:00.648381",
     "exception": false,
     "start_time": "2024-08-22T14:02:00.612818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pca1 = PCA(n_components = 17)\n",
    "X_pca1 = pca.fit_transform(X_tranform)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "458bb068",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:02:00.715799Z",
     "iopub.status.busy": "2024-08-22T14:02:00.715103Z",
     "iopub.status.idle": "2024-08-22T14:02:00.726042Z",
     "shell.execute_reply": "2024-08-22T14:02:00.724438Z"
    },
    "papermill": {
     "duration": 0.049201,
     "end_time": "2024-08-22T14:02:00.730162",
     "exception": false,
     "start_time": "2024-08-22T14:02:00.680961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test = train_test_split(X_pca1,y,test_size=0.2,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4fa3039c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:02:00.778621Z",
     "iopub.status.busy": "2024-08-22T14:02:00.778206Z",
     "iopub.status.idle": "2024-08-22T14:02:00.808277Z",
     "shell.execute_reply": "2024-08-22T14:02:00.806616Z"
    },
    "papermill": {
     "duration": 0.051479,
     "end_time": "2024-08-22T14:02:00.813174",
     "exception": false,
     "start_time": "2024-08-22T14:02:00.761695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr3 = LogisticRegression()\n",
    "lr3.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "5e2116b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:02:00.880598Z",
     "iopub.status.busy": "2024-08-22T14:02:00.879909Z",
     "iopub.status.idle": "2024-08-22T14:02:00.887773Z",
     "shell.execute_reply": "2024-08-22T14:02:00.886117Z"
    },
    "papermill": {
     "duration": 0.046513,
     "end_time": "2024-08-22T14:02:00.891874",
     "exception": false,
     "start_time": "2024-08-22T14:02:00.845361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = lr3.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "22595762",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-22T14:02:00.938432Z",
     "iopub.status.busy": "2024-08-22T14:02:00.938012Z",
     "iopub.status.idle": "2024-08-22T14:02:00.957150Z",
     "shell.execute_reply": "2024-08-22T14:02:00.955877Z"
    },
    "papermill": {
     "duration": 0.038396,
     "end_time": "2024-08-22T14:02:00.959844",
     "exception": false,
     "start_time": "2024-08-22T14:02:00.921448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           M       0.97      0.99      0.98        71\n",
      "           B       0.98      0.95      0.96        43\n",
      "\n",
      "    accuracy                           0.97       114\n",
      "   macro avg       0.97      0.97      0.97       114\n",
      "weighted avg       0.97      0.97      0.97       114\n",
      "\n"
     ]
    }
   ],
   "source": [
    "report = classification_report(y_test,y_pred,target_names=['M','B'])\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5148f9d",
   "metadata": {
    "papermill": {
     "duration": 0.014961,
     "end_time": "2024-08-22T14:02:00.990043",
     "exception": false,
     "start_time": "2024-08-22T14:02:00.975082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 180,
     "sourceId": 408,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.490412,
   "end_time": "2024-08-22T14:02:01.627490",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-22T14:01:52.137078",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
